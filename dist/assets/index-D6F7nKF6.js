(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))i(n);new MutationObserver(n=>{for(const s of n)if(s.type==="childList")for(const a of s.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&i(a)}).observe(document,{childList:!0,subtree:!0});function e(n){const s={};return n.integrity&&(s.integrity=n.integrity),n.referrerPolicy&&(s.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?s.credentials="include":n.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function i(n){if(n.ep)return;n.ep=!0;const s=e(n);fetch(n.href,s)}})();async function b(x,t={},e){return window.__TAURI_INTERNALS__.invoke(x,t,e)}class L{constructor(t){this.canvas=document.getElementById(t),this.ctx=this.canvas.getContext("2d"),this.selectedEntityId=null,this.isDragging=!1,this.dragOffset={x:0,y:0},this.eventListeners={},this.draggedEntity=null,this.scale=1,this.minScale=.25,this.maxScale=3,this.scaleStep=.1,this.setupEventListeners(),this.setupCanvasSize()}setupCanvasSize(){const t=this.canvas.parentElement,e=()=>{const i=t.getBoundingClientRect();this.canvas.width=Math.max(1200,i.width),this.canvas.height=Math.max(800,i.height),this.emit("canvasResized")};e(),window.addEventListener("resize",e)}setupEventListeners(){this.canvas.addEventListener("mousedown",t=>this.handleMouseDown(t)),this.canvas.addEventListener("mousemove",t=>this.handleMouseMove(t)),this.canvas.addEventListener("mouseup",t=>this.handleMouseUp(t)),this.canvas.addEventListener("contextmenu",t=>this.handleContextMenu(t)),this.canvas.addEventListener("dblclick",t=>this.handleDoubleClick(t)),this.canvas.addEventListener("wheel",t=>this.handleWheel(t),{passive:!1})}handleMouseDown(t){const e=this.canvas.getBoundingClientRect(),i=(t.clientX-e.left)/this.scale,n=(t.clientY-e.top)/this.scale,s=this.getEntityAtPosition(i,n),a=this.getRelationAtPosition(i,n);if(console.log("Mouse down at:",{x:i,y:n},"Entity found:",s,"Relation found:",a),s){this.selectedEntityId=s,this.isDragging=!0;const o=this.entities[s];o&&(this.dragOffset={x:i-o.x,y:n-o.y},console.log("Starting drag for entity:",s,"offset:",this.dragOffset)),this.canvas.style.cursor="grabbing",this.emit("entitySelected",s),this.emit("dragStart",s)}else a?(console.log("Relation clicked:",a),this.emit("relationClicked",a)):(this.selectedEntityId=null,this.emit("canvasClicked",{x:i,y:n}))}handleMouseMove(t){const e=this.canvas.getBoundingClientRect(),i=(t.clientX-e.left)/this.scale,n=(t.clientY-e.top)/this.scale;if(this.getEntityAtPosition(i,n)&&!this.isDragging?this.canvas.style.cursor="grab":this.isDragging||(this.canvas.style.cursor="default"),this.isDragging&&this.selectedEntityId&&this.entities){const a=i-this.dragOffset.x,o=n-this.dragOffset.y,r=this.canvas.width/this.scale,c=this.canvas.height/this.scale,d=Math.max(0,Math.min(a,r-150)),h=Math.max(0,Math.min(o,c-100));this.draggedEntity={...this.entities[this.selectedEntityId],x:d,y:h},this.redrawWithDraggedEntity(),this.emit("entityMoved",this.selectedEntityId,d,h),this.updateCanvasSizeToFitContent()}}handleMouseUp(t){this.isDragging&&this.selectedEntityId&&(console.log("Drag ended for entity:",this.selectedEntityId),this.draggedEntity&&this.entities[this.selectedEntityId]&&(this.entities[this.selectedEntityId].x=this.draggedEntity.x,this.entities[this.selectedEntityId].y=this.draggedEntity.y),this.emit("dragEnd",this.selectedEntityId)),this.isDragging=!1,this.dragOffset={x:0,y:0},this.draggedEntity=null,this.canvas.style.cursor="default";const e=this.canvas.getBoundingClientRect(),i=(t.clientX-e.left)/this.scale,n=(t.clientY-e.top)/this.scale;this.getEntityAtPosition(i,n)&&(this.canvas.style.cursor="grab")}handleContextMenu(t){t.preventDefault();const e=this.canvas.getBoundingClientRect(),i=(t.clientX-e.left)/this.scale,n=(t.clientY-e.top)/this.scale,s=this.getEntityAtPosition(i,n);s&&this.emit("entityContextMenu",{entityId:s,x:t.clientX,y:t.clientY})}handleDoubleClick(t){const e=this.canvas.getBoundingClientRect(),i=(t.clientX-e.left)/this.scale,n=(t.clientY-e.top)/this.scale,s=this.getEntityAtPosition(i,n);s?this.emit("entityDoubleClick",s):this.emit("canvasDoubleClick",{x:i,y:n})}handleWheel(t){(t.ctrlKey||t.metaKey)&&(t.preventDefault(),t.deltaY<0?this.zoomIn():t.deltaY>0&&this.zoomOut())}getEntityAtPosition(t,e){if(!this.entities)return null;const i=Object.keys(this.entities).reverse();for(const n of i){const s=this.entities[n];if(t>=s.x&&t<=s.x+s.width&&e>=s.y&&e<=s.y+s.height)return n}return null}getRelationAtPosition(t,e){if(!this.relations||!this.entities)return null;const i=10;for(const n of this.relations){const s=this.entities[n.from_entity_id],a=this.entities[n.to_entity_id];if(!s||!a)continue;const o={x:s.x+s.width/2,y:s.y+s.height/2},r={x:a.x+a.width/2,y:a.y+a.height/2},c=this.getConnectionPoint(s,r),d=this.getConnectionPoint(a,o);if(this.getDistanceToLine(t,e,c,d)<=i)return n.id}return null}getDistanceToLine(t,e,i,n){const s=t-i.x,a=e-i.y,o=n.x-i.x,r=n.y-i.y,c=s*o+a*r,d=o*o+r*r;let h=-1;d!==0&&(h=c/d);let u,y;h<0?(u=i.x,y=i.y):h>1?(u=n.x,y=n.y):(u=i.x+h*o,y=i.y+h*r);const l=t-u,f=e-y;return Math.sqrt(l*l+f*f)}clear(){this.ctx.setTransform(1,0,0,1,0,0),this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.ctx.setTransform(this.scale,0,0,this.scale,0,0),this.drawGrid()}redrawWithDraggedEntity(){this.entities&&(this.clear(),this.relations&&this.relations.forEach(t=>{const e=t.from_entity_id===this.selectedEntityId&&this.draggedEntity?this.draggedEntity:this.entities[t.from_entity_id],i=t.to_entity_id===this.selectedEntityId&&this.draggedEntity?this.draggedEntity:this.entities[t.to_entity_id];e&&i&&this.drawRelation(e,i,t)}),Object.values(this.entities).forEach(t=>{t.id===this.selectedEntityId&&this.draggedEntity?this.drawEntity(this.draggedEntity):this.drawEntity(t)}))}drawGrid(){const e=this.canvas.width/this.scale,i=this.canvas.height/this.scale;this.ctx.strokeStyle="#f0f0f0",this.ctx.lineWidth=1/this.scale;for(let n=0;n<=e;n+=20)this.ctx.beginPath(),this.ctx.moveTo(n,0),this.ctx.lineTo(n,i),this.ctx.stroke();for(let n=0;n<=i;n+=20)this.ctx.beginPath(),this.ctx.moveTo(0,n),this.ctx.lineTo(e,n),this.ctx.stroke()}drawEntity(t){if(!t||typeof t!="object"){console.error("Invalid entity provided to drawEntity:",t);return}const{x:e,y:i,logical_name:n,attributes:s}=t;if(console.log("Drawing entity:",n,"at position:",{x:e,y:i}),console.log("Entity attributes count:",s?s.length:0),typeof e!="number"||typeof i!="number"||!n||!Array.isArray(s)){console.error("Entity missing required properties:",{x:e,y:i,logical_name:n,attributesType:typeof s});return}this.ctx.font="14px Arial";const a=30,o=20,r=10;let d=this.ctx.measureText(n).width+r*2;s.forEach(l=>{l.is_primary_key?this.ctx.font="bold 12px Arial":this.ctx.font="12px Arial";let f="";l.is_primary_key?f+="PK ":l.is_foreign_key&&(f+="FK "),l.is_unique&&!l.is_primary_key&&(f+="UNIQUE "),l.is_auto_increment&&(f+="AI ");let E="";l.is_nullable||(E+=" *");const _=f+l.logical_name+E;this.ctx.font="11px Arial";let p=l.length?`${l.data_type}(${l.length})`:l.data_type;l.default_value&&(p+=` = ${l.default_value}`),!l.is_nullable&&!l.is_primary_key&&(p+=" NOT NULL"),this.ctx.font=l.is_primary_key?"bold 12px Arial":"12px Arial";const v=this.ctx.measureText(_).width;this.ctx.font="11px Arial";const m=this.ctx.measureText(p).width,g=v+m+r*2+30;d=Math.max(d,g)});const h=Math.max(180,d),u=a+s.length*o+r*1.5;t.width=h,t.height=u;const y=this.selectedEntityId===t.id;this.ctx.fillStyle=y?"#e3f2fd":"white",this.ctx.fillRect(e,i,h,u),this.ctx.strokeStyle=y?"#2196f3":"#333",this.ctx.lineWidth=y?3:2,this.ctx.strokeRect(e,i,h,u),this.ctx.fillStyle=y?"#2196f3":"#333",this.ctx.fillRect(e,i,h,a),this.ctx.fillStyle="white",this.ctx.font="bold 14px Arial",this.ctx.textAlign="center",this.ctx.fillText(n,e+h/2,i+a/2+5),this.ctx.fillStyle="#333",this.ctx.font="12px Arial",this.ctx.textAlign="left",s.forEach((l,f)=>{const E=i+a+f*o+15;let _=l.logical_name,p="",v="";l.is_primary_key?(p+="PK ",this.ctx.font="bold 12px Arial"):l.is_foreign_key?(p+="FK ",this.ctx.font="12px Arial"):this.ctx.font="12px Arial",l.is_unique&&!l.is_primary_key&&(p+="UNIQUE "),l.is_auto_increment&&(p+="AI "),l.is_nullable||(v+=" *"),this.ctx.fillStyle=l.is_primary_key?"#d32f2f":l.is_foreign_key?"#1976d2":l.is_auto_increment?"#4caf50":l.is_unique?"#ff9800":"#333",this.ctx.fillText(p+_+v,e+5,E),this.ctx.fillStyle="#666",this.ctx.font="11px Arial";let m=l.length?`${l.data_type}(${l.length})`:l.data_type;l.default_value&&(m+=` = ${l.default_value}`),!l.is_nullable&&!l.is_primary_key&&(m+=" NOT NULL");const g=e+h-5-this.ctx.measureText(m).width;this.ctx.fillText(m,g,E)})}drawRelation(t,e,i){const n={x:t.x+t.width/2,y:t.y+t.height/2},s={x:e.x+e.width/2,y:e.y+e.height/2},a=this.getConnectionPoint(t,s),o=this.getConnectionPoint(e,n);this.ctx.strokeStyle="#666",this.ctx.lineWidth=2,this.ctx.beginPath(),this.ctx.moveTo(a.x,a.y),this.ctx.lineTo(o.x,o.y),this.ctx.stroke();const r={x:(a.x+o.x)/2,y:(a.y+o.y)/2};let c="";switch(i.cardinality){case"OneToOne":c="1:1";break;case"OneToMany":c="1:N";break;case"ManyToMany":c="N:M";break}this.ctx.fillStyle="white",this.ctx.font="12px Arial";const d=this.ctx.measureText(c).width+10;this.ctx.fillRect(r.x-d/2,r.y-10,d,20),this.ctx.fillStyle="#333",this.ctx.textAlign="center",this.ctx.fillText(c,r.x,r.y+5);let h=15;if(i.name){this.ctx.fillStyle="rgba(255, 255, 255, 0.8)";const u=this.ctx.measureText(i.name).width+8;this.ctx.fillRect(r.x-u/2,r.y+h,u,16),this.ctx.fillStyle="#666",this.ctx.font="11px Arial",this.ctx.fillText(i.name,r.x,r.y+h+11),h+=20}if(i.from_attribute&&i.to_attribute){const u=`${i.from_attribute} → ${i.to_attribute}`;this.ctx.fillStyle="rgba(255, 255, 255, 0.9)";const y=this.ctx.measureText(u).width+8;this.ctx.fillRect(r.x-y/2,r.y+h,y,16),this.ctx.fillStyle="#0066cc",this.ctx.font="10px Arial",this.ctx.fillText(u,r.x,r.y+h+11)}}getConnectionPoint(t,e){const i=t.x+t.width/2,n=t.y+t.height/2,s=e.x-i,a=e.y-n,o=t.width/2,r=t.height/2,c=a/s,d=r/o;let h,u;return Math.abs(c)<d?(h=s>0?t.x+t.width:t.x,u=n+c*o*(s>0?1:-1)):(u=a>0?t.y+t.height:t.y,h=i+r/c*(a>0?1:-1)),{x:h,y:u}}selectEntity(t){this.selectedEntityId=t}setEntities(t){this.entities=t,this.updateCanvasSizeToFitContent()}setRelations(t){this.relations=t,this.updateCanvasSizeToFitContent()}on(t,e){this.eventListeners[t]||(this.eventListeners[t]=[]),this.eventListeners[t].push(e)}emit(t,e){this.eventListeners[t]&&this.eventListeners[t].forEach(i=>i(e))}zoomIn(){this.setScale(this.scale+this.scaleStep)}zoomOut(){this.setScale(this.scale-this.scaleStep)}resetZoom(){this.setScale(1)}setScale(t){const e=Math.max(this.minScale,Math.min(this.maxScale,t));e!==this.scale&&(this.scale=e,this.updateCanvasSizeToFitContent(),this.emit("canvasResized"))}updateCanvasSizeToFitContent(){const t=this.canvas.parentElement;if(!t)return;const e=t.getBoundingClientRect(),i=200;let n=1200,s=800;if(this.entities&&Object.keys(this.entities).length>0){let r=0,c=0;Object.values(this.entities).forEach(d=>{const h=(d.x||0)+(d.width||150),u=(d.y||0)+(d.height||100);h>r&&(r=h),u>c&&(c=u)}),n=Math.max(n,r+i),s=Math.max(s,c+i)}const a=Math.max(Math.ceil(n*this.scale),Math.ceil(e.width)),o=Math.max(Math.ceil(s*this.scale),Math.ceil(e.height));(this.canvas.width!==a||this.canvas.height!==o)&&(this.canvas.width=a,this.canvas.height=o,this.emit("canvasResized"))}}class S{constructor(t){this.canvas=t,this.entities={},this.eventListeners={},this.currentEntity=null,this.setupEventListeners()}setupEventListeners(){const t=document.getElementById("entity-modal"),e=document.getElementById("entity-form"),i=document.getElementById("cancel-entity-btn"),n=document.getElementById("add-attribute-btn");e.addEventListener("submit",s=>this.handleEntitySubmit(s)),i.addEventListener("click",()=>this.hideEntityModal()),n.addEventListener("click",()=>this.addAttributeField()),t.addEventListener("click",s=>{s.target===t&&this.hideEntityModal()}),document.addEventListener("keydown",s=>{s.key==="Escape"&&t.style.display==="flex"&&this.hideEntityModal()}),this.canvas.on("entityDoubleClick",s=>{const a=this.entities[s];a&&this.showEntityModal(a)}),this.canvas.on("canvasDoubleClick",s=>{this.showEntityModal(null,s.x,s.y)}),this.canvas.on("entityContextMenu",s=>{this.showContextMenu(s)})}generateId(){return"entity_"+Date.now()+"_"+Math.random().toString(36).substr(2,9)}showEntityModal(t=null,e=100,i=100){this.currentEntity=t;const n=document.getElementById("entity-modal"),s=document.getElementById("entity-form"),a=document.getElementById("entity-logical-name"),o=document.getElementById("entity-physical-name"),r=document.getElementById("attributes-container");s.reset(),r.innerHTML="",t?(a.value=t.logical_name,o.value=t.physical_name,t.attributes.forEach(c=>{this.addAttributeField(c)})):this.addAttributeField(),n.style.display="flex",a.focus()}hideEntityModal(){document.getElementById("entity-modal").style.display="none",this.currentEntity=null}addAttributeField(t=null){const e=document.getElementById("attributes-container");""+Date.now()+Math.random().toString(36).substr(2,5);const i=document.createElement("div");i.className="attribute-field",i.innerHTML=`
            <!-- 첫 번째 행: 위아래 버튼 + 입력 필드들 + 삭제 버튼 -->
            <div class="attribute-row-main">
                <!-- 위아래 버튼 -->
                <div class="attribute-move-buttons">
                    <button type="button" class="move-up-btn">▲</button>
                    <button type="button" class="move-down-btn">▼</button>
                </div>
                
                <!-- 논리명 입력 -->
                <input type="text" name="attr_logical_name" value="${t?t.logical_name:""}" 
                       placeholder="회사명" required 
                       class="attribute-input-flex">
                
                <!-- 물리명 입력 -->
                <input type="text" name="attr_physical_name" value="${t?t.physical_name:""}" 
                       placeholder="name" required 
                       class="attribute-input-flex">
                
                <!-- 데이터 타입 드롭다운 -->
                <select name="attr_type" class="attribute-select-type">
                    <option value="VARCHAR" ${t&&t.data_type==="VARCHAR"?"selected":t?"":"selected"}>VARCHAR</option>
                    <option value="INT" ${t&&t.data_type==="INT"?"selected":""}>INT</option>
                    <option value="TEXT" ${t&&t.data_type==="TEXT"?"selected":""}>TEXT</option>
                    <option value="DATE" ${t&&t.data_type==="DATE"?"selected":""}>DATE</option>
                    <option value="DATETIME" ${t&&t.data_type==="DATETIME"?"selected":""}>DATETIME</option>
                    <option value="DECIMAL" ${t&&t.data_type==="DECIMAL"?"selected":""}>DECIMAL</option>
                    <option value="BOOLEAN" ${t&&t.data_type==="BOOLEAN"?"selected":""}>BOOLEAN</option>
                </select>
                
                <!-- 길이 입력 -->
                <input type="text" name="attr_length" value="${t&&t.length||""}" 
                       placeholder="200" 
                       class="attribute-input-length">
                
                <!-- 기본값 입력 -->
                <input type="text" name="attr_default_value" value="${t&&t.default_value||""}" 
                       placeholder="기본값" 
                       class="attribute-input-default">
                
                <!-- 삭제 버튼 -->
                <button type="button" class="remove-attr-btn">🗑️</button>
            </div>
            
            <!-- 두 번째 행: 체크박스들을 가로 배열 -->
            <div class="attribute-row-checkboxes">
                <!-- PK 체크박스 -->
                <label class="attribute-checkbox-label">
                    <input type="checkbox" name="attr_pk" ${t&&t.is_primary_key?"checked":""} 
                           class="attribute-checkbox">
                    <span class="attribute-checkbox-text">PK</span>
                </label>
                
                <!-- FK 체크박스 -->
                <label class="attribute-checkbox-label">
                    <input type="checkbox" name="attr_fk" ${t&&t.is_foreign_key?"checked":""} 
                           class="attribute-checkbox">
                    <span class="attribute-checkbox-text">FK</span>
                </label>
                
                <!-- NOT NULL 체크박스 -->
                <label class="attribute-checkbox-label">
                    <input type="checkbox" name="attr_not_null" ${t&&!t.is_nullable?"checked":""} 
                           class="attribute-checkbox">
                    <span class="attribute-checkbox-text">NOT NULL</span>
                </label>
                
                <!-- UNIQUE 체크박스 -->
                <label class="attribute-checkbox-label">
                    <input type="checkbox" name="attr_unique" ${t&&t.is_unique?"checked":""} 
                           class="attribute-checkbox">
                    <span class="attribute-checkbox-text">UNIQUE</span>
                </label>
                
                <!-- AUTO_INCREMENT 체크박스 -->
                <label class="attribute-checkbox-label">
                    <input type="checkbox" name="attr_auto_increment" ${t&&t.is_auto_increment?"checked":""} 
                           class="attribute-checkbox">
                    <span class="attribute-checkbox-text">AUTO_INCREMENT</span>
                </label>
            </div>
            
            <!-- 세 번째 행: Remark(비고) 입력 -->
            <div style="display:flex; align-items:center; gap:8px; margin: 6px 0 0 40px;">
                <label style="min-width:60px; font-size:12px; color:#555;">Remark</label>
                <input type="text" name="attr_remark" value="${t&&t.remark||""}" 
                       placeholder="설명/비고" class="attribute-input-flex">
            </div>
        `,i.querySelector(".remove-attr-btn").addEventListener("click",()=>{i.remove(),this.updateMoveButtons()});const s=i.querySelector(".move-up-btn"),a=i.querySelector(".move-down-btn");s.addEventListener("click",()=>{this.moveAttributeUp(i),this.updateMoveButtons()}),a.addEventListener("click",()=>{this.moveAttributeDown(i),this.updateMoveButtons()}),e.appendChild(i),this.updateMoveButtons()}moveAttributeUp(t){const e=t.previousElementSibling;e&&e.classList.contains("attribute-field")&&(t.parentNode.insertBefore(t,e),console.log("Moved attribute up"))}moveAttributeDown(t){const e=t.nextElementSibling;e&&e.classList.contains("attribute-field")&&(t.parentNode.insertBefore(e,t),console.log("Moved attribute down"))}updateMoveButtons(){const t=document.querySelectorAll(".attribute-field");t.forEach((e,i)=>{const n=e.querySelector(".move-up-btn"),s=e.querySelector(".move-down-btn");n&&s&&(n.disabled=i===0,s.disabled=i===t.length-1)})}handleEntitySubmit(t){t.preventDefault(),console.log("Form submitted!");const e=new FormData(t.target),i=e.get("entity-logical-name"),n=e.get("entity-physical-name");console.log("Entity Logical:",i,"Physical:",n);const s=[],a=document.querySelectorAll(".attribute-field");if(console.log("Attribute fields found:",a.length),a.forEach(r=>{const c=r.querySelector('input[name="attr_logical_name"]').value,d=r.querySelector('input[name="attr_physical_name"]').value,h=r.querySelector('select[name="attr_type"]').value,u=r.querySelector('input[name="attr_length"]').value,y=r.querySelector('input[name="attr_default_value"]').value,l=r.querySelector('input[name="attr_pk"]').checked,f=r.querySelector('input[name="attr_fk"]').checked,E=r.querySelector('input[name="attr_not_null"]').checked,_=r.querySelector('input[name="attr_unique"]').checked,p=r.querySelector('input[name="attr_auto_increment"]').checked,v=r.querySelector('input[name="attr_remark"]').value;c.trim()&&d.trim()&&s.push({logical_name:c.trim(),physical_name:d.trim(),data_type:h,length:u.trim()||null,default_value:y.trim()||null,is_primary_key:l,is_foreign_key:f,is_nullable:!E,is_unique:_,is_auto_increment:p,foreign_key_reference:null,remark:v.trim()||null})}),!i.trim()||!n.trim()){alert("엔티티 논리명과 물리명을 모두 입력하세요.");return}if(s.length===0){alert("최소 하나의 속성을 추가하세요.");return}let o;this.currentEntity?(o={...this.currentEntity,logical_name:i.trim(),physical_name:n.trim(),attributes:s},this.entities[o.id]=o,this.emit("entityUpdated",o)):(o={id:this.generateId(),logical_name:i.trim(),physical_name:n.trim(),x:Math.random()*500+50,y:Math.random()*300+50,width:150,height:100,attributes:s},this.entities[o.id]=o,this.emit("entityAdded",o)),this.hideEntityModal()}showContextMenu(t){const e=document.getElementById("context-menu");e.querySelectorAll(".context-menu-item").forEach(s=>{const a=s.cloneNode(!0);s.parentNode.replaceChild(a,s)}),e.querySelector('[data-action="edit"]').addEventListener("click",()=>{this.hideContextMenu();const s=this.entities[t.entityId];s&&this.showEntityModal(s)}),e.querySelector('[data-action="delete"]').addEventListener("click",()=>{this.hideContextMenu(),confirm("정말 이 엔티티를 삭제하시겠습니까?")&&this.deleteEntity(t.entityId)}),e.style.display="block",e.style.left=t.x+"px",e.style.top=t.y+"px";const n=s=>{e.contains(s.target)||(this.hideContextMenu(),document.removeEventListener("click",n))};setTimeout(()=>{document.addEventListener("click",n)},10)}hideContextMenu(){document.getElementById("context-menu").style.display="none"}deleteEntity(t){this.entities[t]&&(delete this.entities[t],this.emit("entityDeleted",t))}setEntities(t){this.entities=t||{},this.canvas.setEntities(this.entities)}getEntities(){return this.entities}getEntityIds(){return Object.keys(this.entities)}on(t,e){this.eventListeners[t]||(this.eventListeners[t]=[]),this.eventListeners[t].push(e)}emit(t,e){this.eventListeners[t]&&this.eventListeners[t].forEach(i=>i(e))}}class I{constructor(t,e){this.canvas=t,this.entityManager=e,this.relations=[],this.eventListeners={},this.currentRelation=null,this.setupEventListeners()}setupEventListeners(){const t=document.getElementById("relation-modal"),e=document.getElementById("relation-form"),i=document.getElementById("cancel-relation-btn"),n=document.getElementById("delete-relation-btn"),s=document.getElementById("from-entity"),a=document.getElementById("to-entity");e.addEventListener("submit",o=>this.handleRelationSubmit(o)),i.addEventListener("click",()=>this.hideRelationModal()),n.addEventListener("click",()=>this.handleDeleteRelation()),s.addEventListener("change",o=>this.updateFromAttributes(o.target.value)),a.addEventListener("change",o=>this.updateToAttributes(o.target.value)),t.addEventListener("click",o=>{o.target===t&&this.hideRelationModal()}),document.addEventListener("keydown",o=>{o.key==="Escape"&&t.style.display==="flex"&&this.hideRelationModal()})}generateId(){return"relation_"+Date.now()+"_"+Math.random().toString(36).substr(2,9)}showRelationModal(t=null){this.currentRelation=t;const e=document.getElementById("relation-modal"),i=document.getElementById("relation-form"),n=document.getElementById("from-entity"),s=document.getElementById("to-entity"),a=document.getElementById("cardinality"),o=document.getElementById("relation-name"),r=document.getElementById("delete-relation-btn");i.reset(),this.updateEntityOptions(),t?(r.style.display="block",console.log("Loading relation for editing:",t),n.value=t.from_entity_id,s.value=t.to_entity_id,a.value=t.cardinality,o.value=t.name,this.updateFromAttributes(t.from_entity_id),this.updateToAttributes(t.to_entity_id),setTimeout(()=>{const c=document.getElementById("from-attribute"),d=document.getElementById("to-attribute");t.from_attribute&&(c.value=t.from_attribute),t.to_attribute&&(d.value=t.to_attribute)},100)):r.style.display="none",e.style.display="flex",n.focus()}hideRelationModal(){document.getElementById("relation-modal").style.display="none",this.currentRelation=null}handleDeleteRelation(){this.currentRelation&&confirm("정말 이 관계를 삭제하시겠습니까?")&&(this.deleteRelation(this.currentRelation.id),this.hideRelationModal())}updateEntityOptions(){const t=document.getElementById("from-entity"),e=document.getElementById("to-entity"),i=this.entityManager.getEntities();for(;t.children.length>1;)t.removeChild(t.lastChild);for(;e.children.length>1;)e.removeChild(e.lastChild);Object.values(i).forEach(n=>{const s=n.logical_name||n.name,a=document.createElement("option");a.value=n.id,a.textContent=s,t.appendChild(a);const o=document.createElement("option");o.value=n.id,o.textContent=s,e.appendChild(o)})}updateFromAttributes(t){const e=document.getElementById("from-attribute"),i=this.entityManager.getEntities();e.innerHTML='<option value="">속성을 선택하세요</option>',t&&i[t]&&(i[t].attributes.forEach(s=>{if(s.is_primary_key){const a=document.createElement("option");a.value=s.physical_name,a.textContent=`${s.logical_name} (${s.data_type})`,e.appendChild(a)}}),e.children.length===1&&(e.innerHTML='<option value="">이 엔티티에는 PK가 없습니다</option>'))}updateToAttributes(t){const e=document.getElementById("to-attribute"),i=this.entityManager.getEntities();e.innerHTML='<option value="">자동 생성</option>',t&&i[t]&&i[t].attributes.forEach(s=>{if(!s.is_primary_key){const a=document.createElement("option");a.value=s.physical_name,a.textContent=`${s.logical_name} (${s.data_type})`,e.appendChild(a)}})}handleRelationSubmit(t){t.preventDefault(),console.log("🚀 === RELATION FORM SUBMITTED ===");const e=new FormData(t.target),i=e.get("from-entity"),n=e.get("from-attribute"),s=e.get("to-entity"),a=e.get("to-attribute"),o=!a||a.trim()===""?null:a.trim();console.log("=== Form Data Debug ==="),console.log("toAttributeRaw:",`"${a}"`),console.log("toAttribute (processed):",o);const r=e.get("cardinality"),c=e.get("relation-name");if(console.log("Relation data:",{fromEntityId:i,fromAttribute:n,toEntityId:s,toAttribute:o,cardinality:r,relationName:c}),!i||!s||!n){alert("From 엔티티, From 속성, To 엔티티를 모두 선택하세요.");return}if(i===s){alert("같은 엔티티끼리는 관계를 만들 수 없습니다.");return}if(!c.trim()){alert("관계 이름을 입력하세요.");return}let d;if(this.currentRelation){d={...this.currentRelation,from_entity_id:i,from_attribute:n,to_entity_id:s,to_attribute:o,cardinality:r,name:c.trim()},console.log("Updating existing relation:",d);const h=this.relations.findIndex(u=>u.id===d.id);console.log("Relation index in array:",h),h!==-1?(this.relations[h]=d,console.log("Relation updated in RelationManager array")):console.error("Relation not found in RelationManager array!"),console.log("Emitting relationUpdated event:",d),this.emit("relationUpdated",d)}else d={id:this.generateId(),from_entity_id:i,from_attribute:n,to_entity_id:s,to_attribute:o,cardinality:r,name:c.trim()},this.relations.push(d),console.log("🔍 === FK Auto-generation Check ==="),console.log("Cardinality:",r),console.log("toAttribute:",o),console.log("fromEntityId:",i),console.log("toEntityId:",s),console.log("✅ FORCE Creating FK for ANY relationship (TEST MODE)"),this.createForeignKey(d),console.log("Emitting relationAdded:",d),this.emit("relationAdded",d);this.hideRelationModal()}createForeignKey(t){console.log("=== FK Creation Debug Start ==="),console.log("Relation:",t);const e=this.entityManager.getEntities(),i=e[t.from_entity_id],n=e[t.to_entity_id];if(console.log("From Entity:",i),console.log("To Entity:",n),!i||!n){console.error("Entity not found!");return}const s=i.attributes.find(c=>c.physical_name===t.from_attribute);if(console.log("PK Attribute found:",s),!s){console.error("PK attribute not found!");return}const a=`${i.physical_name.toLowerCase()}_${s.physical_name}`,o=`${i.logical_name}_${s.logical_name}`;console.log("FK physical name generated:",a),console.log("FK logical name generated:",o);const r=n.attributes.find(c=>c.physical_name===a);if(console.log("Existing attribute:",r),r)console.log("Marking existing attribute as FK"),r.is_foreign_key=!0,r.foreign_key_reference=`${i.physical_name}.${s.physical_name}`,t.to_attribute=a;else{console.log("Creating new FK attribute");const c={logical_name:o,physical_name:a,data_type:s.data_type,length:s.length||null,default_value:null,is_primary_key:!1,is_foreign_key:!0,is_nullable:!0,is_unique:!1,is_auto_increment:!1,foreign_key_reference:`${i.physical_name}.${s.physical_name}`};console.log("New FK attribute:",c),console.log("To entity attributes before:",n.attributes.length),n.attributes.push(c),t.to_attribute=a,console.log("To entity attributes after:",n.attributes.length),console.log("Updated to entity:",n)}console.log("Emitting entityUpdated event for:",n.name),this.entityManager.emit("entityUpdated",n),console.log("=== FK Creation Debug End ===")}deleteRelation(t){const e=this.relations.findIndex(i=>i.id===t);e!==-1&&(this.relations.splice(e,1),this.emit("relationDeleted",t))}setRelations(t){this.relations=t||[]}getRelations(){return this.relations}setupRelationEditing(){this.canvas.on("relationClicked",t=>{console.log("Relation clicked in RelationManager:",t);const e=this.relations.find(i=>i.id===t);e?(console.log("Opening relation modal for editing:",e),this.showRelationModal(e)):console.error("Relation not found:",t)}),this.canvas.on("relationContextMenu",t=>{this.showRelationContextMenu(t)})}showRelationContextMenu(t){confirm("이 관계를 삭제하시겠습니까?")&&this.deleteRelation(t.relationId)}validateRelation(t,e){const i=this.entityManager.getEntities();return!i[t]||!i[e]?{valid:!1,message:"존재하지 않는 엔티티입니다."}:t===e?{valid:!1,message:"같은 엔티티끼리는 관계를 만들 수 없습니다."}:{valid:!0}}onEntityDeleted(t){this.relations.filter(i=>i.from_entity_id===t||i.to_entity_id===t).forEach(i=>{this.deleteRelation(i.id)})}setupForeignKeys(){this.relations.forEach(t=>{if(t.cardinality==="OneToMany"){const e=this.entityManager.getEntities()[t.from_entity_id],i=this.entityManager.getEntities()[t.to_entity_id];if(e&&i){const n=e.attributes.find(s=>s.is_primary_key);if(n){const s=e.name.toLowerCase()+"_id";if(!i.attributes.find(o=>o.name===s&&o.is_foreign_key)){const o={name:s,data_type:n.data_type,is_primary_key:!1,is_foreign_key:!0,is_nullable:!1,foreign_key_reference:`${e.name}.${n.name}`};i.attributes.push(o)}}}}})}on(t,e){this.eventListeners[t]||(this.eventListeners[t]=[]),this.eventListeners[t].push(e)}emit(t,e){this.eventListeners[t]&&this.eventListeners[t].forEach(i=>i(e))}}const w=3e4;class A{constructor(){this.currentFilePath=null,this.isModified=!1,this.loadingState={isLoading:!1,operation:"",progress:0},this.eventListeners=new Map}async saveDiagram(t,e=null){this.setLoadingState(!0,"파일 저장 중...");try{this.validateDiagram(t);let i;return e?i=await this.writeFile(e,JSON.stringify(t,null,2)):i=await this.invokeWithTimeout("save_diagram_to_file",{diagram:t},w),this.currentFilePath=i,this.isModified=!1,this.setLoadingState(!1),this.emit("diagramSaved",{diagram:t,filePath:i}),i}catch(i){this.setLoadingState(!1);const n=this.getErrorMessage(i);throw this.emit("saveError",{error:n}),new Error(`저장 실패: ${n}`)}}async loadDiagram(t=null){this.setLoadingState(!0,"파일 로딩 중...");try{let e;if(t){const i=await this.readFile(t);e=JSON.parse(i)}else e=await this.invokeWithTimeout("load_diagram_from_file",{},w);return this.validateDiagram(e),this.currentFilePath=t,this.isModified=!1,this.setLoadingState(!1),this.emit("diagramLoaded",{diagram:e,filePath:t}),e}catch(e){this.setLoadingState(!1);const i=this.getErrorMessage(e);throw this.emit("loadError",{error:i}),new Error(`로드 실패: ${i}`)}}async exportMarkdown(t){this.setLoadingState(!0,"Markdown 내보내기 중...");try{this.validateDiagram(t);const e=await this.invokeWithTimeout("export_markdown",{diagram:t},w);return this.setLoadingState(!1),this.emit("exportCompleted",{format:"markdown",filePath:e}),e}catch(e){this.setLoadingState(!1);const i=this.getErrorMessage(e);throw this.emit("exportError",{format:"markdown",error:i}),new Error(`Markdown 내보내기 실패: ${i}`)}}async exportMermaid(t){this.setLoadingState(!0,"Mermaid 내보내기 중...");try{this.validateDiagram(t);const e=await this.invokeWithTimeout("export_mermaid",{diagram:t},w);return this.setLoadingState(!1),this.emit("exportCompleted",{format:"mermaid",filePath:e}),e}catch(e){this.setLoadingState(!1);const i=this.getErrorMessage(e);throw this.emit("exportError",{format:"mermaid",error:i}),new Error(`Mermaid 내보내기 실패: ${i}`)}}diagramToMarkdown(t){let e=`# ERD Diagram

`;return Object.keys(t.entities).length>0&&(e+=`## Entities

`,Object.values(t.entities).forEach(i=>{e+=`### ${i.name}

`,i.attributes.length>0&&(e+=`| Attribute | Type | Constraints |
`,e+=`|-----------|------|-------------|
`,i.attributes.forEach(n=>{const s=[];n.is_primary_key&&s.push("PK"),n.is_foreign_key&&s.push("FK"),n.is_nullable||s.push("NOT NULL");const a=s.length>0?s.join(", "):"";e+=`| ${n.name} | ${n.data_type} | ${a} |
`}),e+=`
`)})),t.relations.length>0&&(e+=`## Relations

`,t.relations.forEach(i=>{const n=t.entities[i.from_entity_id],s=t.entities[i.to_entity_id];if(n&&s){let a;switch(i.cardinality){case"OneToOne":a="1:1";break;case"OneToMany":a="1:N";break;case"ManyToMany":a="N:M";break;default:a=i.cardinality}e+=`- ${n.name} (${a}) → ${s.name} : ${i.name}
`}})),e}diagramToMermaid(t){let e="```mermaid\nerDiagram\n";return Object.values(t.entities).forEach(i=>{const n=this.cleanEntityName(i.name);e+=`    ${n} {
`,i.attributes.forEach(s=>{const a=this.cleanEntityName(s.name);let o=s.data_type;s.length&&(o+=`(${s.length})`),s.is_primary_key&&(o+=" PK"),s.is_foreign_key&&(o+=" FK"),e+=`        ${a} ${o}
`}),e+=`    }
`}),t.relations.forEach(i=>{const n=t.entities[i.from_entity_id],s=t.entities[i.to_entity_id];if(n&&s){let a;switch(i.cardinality){case"OneToOne":a="||--||";break;case"OneToMany":a="||--o{";break;case"ManyToMany":a="}o--o{";break;default:a="||--||"}const o=this.cleanEntityName(n.name),r=this.cleanEntityName(s.name),c=this.cleanEntityName(i.name);e+=`    ${o} ${a} ${r} : ${c}
`}}),e+="```\n",e}cleanEntityName(t){let e=t.replace(/[^a-zA-Z0-9가-힣ㄱ-ㅎㅏ-ㅣ]/g,"_");return e=e.split("_").filter(i=>i.length>0).join("_"),e||"entity"}diagramToJSON(t){return JSON.stringify(t,null,2)}diagramFromJSON(t){try{const e=JSON.parse(t);return this.validateDiagram(e),e.canvas_width=e.canvas_width||1200,e.canvas_height=e.canvas_height||800,e}catch(e){throw new Error(`JSON 파싱 실패: ${e.message}`)}}validateDiagram(t){if(!t||typeof t!="object")throw new Error("올바르지 않은 다이어그램 형식입니다.");if(!t.entities||typeof t.entities!="object")throw new Error("엔티티 데이터가 올바르지 않습니다.");if(!Array.isArray(t.relations))throw new Error("관계 데이터가 올바르지 않습니다.");if(Object.keys(t.entities).length>1e3)throw new Error("엔티티가 너무 많습니다. 최대 1000개까지 지원합니다.");if(t.relations.length>5e3)throw new Error("관계가 너무 많습니다. 최대 5000개까지 지원합니다.");for(const[i,n]of Object.entries(t.entities)){if(!i||!n.name)throw new Error("엔티티 ID와 이름은 필수입니다.");if(!Array.isArray(n.attributes))throw new Error(`엔티티 '${n.name}'의 속성이 올바르지 않습니다.`);if(n.attributes.length>100)throw new Error(`엔티티 '${n.name}'의 속성이 너무 많습니다. 최대 100개까지 지원합니다.`);if(typeof n.x!="number"||!isFinite(n.x)||typeof n.y!="number"||!isFinite(n.y)||typeof n.width!="number"||!isFinite(n.width)||typeof n.height!="number"||!isFinite(n.height))throw new Error(`엔티티 '${n.name}'의 위치나 크기 값이 올바르지 않습니다.`)}for(const i of t.relations){if(!i.from_entity_id||!i.to_entity_id)throw new Error("관계에 엔티티 ID가 누락되었습니다.");if(!t.entities[i.from_entity_id])throw new Error(`관계 '${i.name||i.id}'의 시작 엔티티를 찾을 수 없습니다.`);if(!t.entities[i.to_entity_id])throw new Error(`관계 '${i.name||i.id}'의 끝 엔티티를 찾을 수 없습니다.`)}return!0}async invokeWithTimeout(t,e={},i=w){return new Promise((n,s)=>{const a=setTimeout(()=>{s(new Error(`명령 '${t}' 실행 시간이 초과되었습니다. (${i/1e3}초)`))},i);b(t,e).then(o=>{clearTimeout(a),n(o)}).catch(o=>{clearTimeout(a),s(o)})})}getErrorMessage(t){return typeof t=="string"?t:t&&t.message?t.message:"알 수 없는 오류가 발생했습니다."}setLoadingState(t,e="",i=0){this.loadingState={isLoading:t,operation:e,progress:Math.max(0,Math.min(100,i))},this.emit("loadingStateChanged",this.loadingState)}getLoadingState(){return{...this.loadingState}}on(t,e){this.eventListeners.has(t)||this.eventListeners.set(t,[]),this.eventListeners.get(t).push(e)}off(t,e){if(this.eventListeners.has(t)){const i=this.eventListeners.get(t),n=i.indexOf(e);n>-1&&i.splice(n,1)}}emit(t,e){this.eventListeners.has(t)&&this.eventListeners.get(t).forEach(i=>{try{i(e)}catch(n){console.error(`이벤트 콜백 오류 (${t}):`,n)}})}enableAutoSave(t,e=3e4){this.autoSaveInterval&&clearInterval(this.autoSaveInterval),this.autoSaveInterval=setInterval(async()=>{if(this.isModified&&this.currentFilePath)try{await this.saveDiagram(t,this.currentFilePath),console.log("자동 저장 완료")}catch(i){console.error("자동 저장 실패:",i)}},e)}disableAutoSave(){this.autoSaveInterval&&(clearInterval(this.autoSaveInterval),this.autoSaveInterval=null)}markAsModified(){this.isModified=!0}markAsSaved(){this.isModified=!1}getModifiedStatus(){return this.isModified}getCurrentFilePath(){return this.currentFilePath}addToRecentFiles(t){const i=this.getRecentFiles().filter(s=>s!==t);i.unshift(t);const n=i.slice(0,10);localStorage.setItem("erd-editor-recent-files",JSON.stringify(n))}getRecentFiles(){try{const t=localStorage.getItem("erd-editor-recent-files");return t?JSON.parse(t):[]}catch(t){return console.error("최근 파일 목록 로드 실패:",t),[]}}clearRecentFiles(){localStorage.removeItem("erd-editor-recent-files")}async readFile(t){throw new Error("File reading not implemented")}async writeFile(t,e){throw new Error("File writing not implemented")}}class T{constructor(){this.canvas=new L("canvas"),this.entityManager=new S(this.canvas),this.relationManager=new I(this.canvas,this.entityManager),this.fileHandler=new A,this.diagram={entities:{},relations:[],canvas_width:1200,canvas_height:800},this.isDragging=!1,this.autoSaveEnabled=!0,this.lastBackupTime=null,this.currentFilePath=null,this.initializeEventListeners(),this.setupFileHandlerEvents(),this.setupAutoSave(),this.setupRelationEditing(),this.loadAutoBackup(),this.render()}initializeEventListeners(){const t=document.getElementById("new-btn");t&&t.addEventListener("click",()=>this.newDiagram());const e=document.getElementById("open-btn"),i=document.getElementById("save-btn"),n=document.getElementById("menu-open"),s=document.getElementById("menu-save"),a=document.getElementById("menu-save-as"),o=document.getElementById("menu-export-md"),r=document.getElementById("menu-export-mermaid");e&&e.addEventListener("click",()=>this.openDiagram()),i&&i.addEventListener("click",()=>this.saveDiagram()),n&&n.addEventListener("click",()=>this.openDiagram()),s&&s.addEventListener("click",()=>this.saveDiagram()),a&&a.addEventListener("click",()=>this.saveAsDialog()),o&&o.addEventListener("click",()=>this.exportMarkdown()),r&&r.addEventListener("click",()=>this.exportMermaid());const c=document.getElementById("save-as-btn");c&&c.addEventListener("click",()=>this.saveAsDialog());const d=document.getElementById("add-entity-btn");d&&d.addEventListener("click",()=>this.addEntity());const h=document.getElementById("add-relation-btn");h&&h.addEventListener("click",()=>this.addRelation());const u=document.getElementById("menu-add-entity"),y=document.getElementById("menu-add-relation");u&&u.addEventListener("click",()=>this.addEntity()),y&&y.addEventListener("click",()=>this.addRelation());const l=document.getElementById("export-md-btn");l&&l.addEventListener("click",()=>this.exportMarkdown());const f=document.getElementById("export-mermaid-btn");f&&f.addEventListener("click",()=>this.exportMermaid());const E=document.getElementById("toggle-entity-list-btn"),_=document.getElementById("zoom-in-btn"),p=document.getElementById("zoom-out-btn"),v=document.getElementById("zoom-reset-btn");E&&E.addEventListener("click",()=>this.toggleSidebar()),_&&_.addEventListener("click",()=>{this.canvas.zoomIn(),this.render()}),p&&p.addEventListener("click",()=>{this.canvas.zoomOut(),this.render()}),v&&v.addEventListener("click",()=>{this.canvas.resetZoom(),this.render()}),this.entityManager.on("entityAdded",m=>{this.diagram.entities[m.id]=m,this.canvas.setEntities(this.diagram.entities),this.canvas.setRelations(this.diagram.relations),this.updateEntityList(),this.render(),this.fileHandler.markAsModified()}),this.entityManager.on("entityUpdated",m=>{this.diagram.entities[m.id]=m,this.canvas.setEntities(this.diagram.entities),this.canvas.setRelations(this.diagram.relations),this.updateEntityList(),this.render(),this.fileHandler.markAsModified()}),this.entityManager.on("entityDeleted",m=>{delete this.diagram.entities[m],this.diagram.relations=this.diagram.relations.filter(g=>g.from_entity_id!==m&&g.to_entity_id!==m),this.canvas.setEntities(this.diagram.entities),this.canvas.setRelations(this.diagram.relations),this.updateEntityList(),this.render(),this.fileHandler.markAsModified()}),this.relationManager.on("relationAdded",m=>{console.log("🔥 MAIN: relationAdded event received:",m),console.log("🔥 MAIN: Current diagram.relations length before:",this.diagram.relations.length),this.diagram.relations.push(m),console.log("🔥 MAIN: Current diagram.relations length after:",this.diagram.relations.length),this.canvas.setRelations(this.diagram.relations),this.render(),this.fileHandler.markAsModified(),console.log("🔥 MAIN: Relation added and rendered successfully")}),this.relationManager.on("relationUpdated",m=>{console.log("Relation updated in main:",m);const g=this.diagram.relations.findIndex(M=>M.id===m.id);g!==-1?(this.diagram.relations[g]=m,this.canvas.setRelations(this.diagram.relations),this.render(),this.fileHandler.markAsModified(),console.log("Relation updated and rendered")):console.error("Updated relation not found in diagram:",m.id)}),this.relationManager.on("relationDeleted",m=>{this.diagram.relations=this.diagram.relations.filter(g=>g.id!==m),this.canvas.setRelations(this.diagram.relations),this.render(),this.fileHandler.markAsModified()}),this.canvas.on("entityMoved",(m,g,M)=>{this.diagram.entities[m]&&(console.log("Entity moved:",m,"to:",{x:g,y:M}),this.diagram.entities[m].x=g,this.diagram.entities[m].y=M,this.isDragging||(this.canvas.setEntities(this.diagram.entities),this.canvas.setRelations(this.diagram.relations),this.render()))}),window.addEventListener("entityUpdated",m=>{const g=m.detail;g&&this.diagram.entities[g.id]&&(console.log("Entity updated via window event:",g.name),this.diagram.entities[g.id]=g,this.canvas.setEntities(this.diagram.entities),this.canvas.setRelations(this.diagram.relations),this.updateEntityList(),this.render())}),this.canvas.on("dragStart",m=>{console.log("Drag started for:",m),this.isDragging=!0}),this.canvas.on("dragEnd",m=>{console.log("Drag ended for:",m),this.isDragging=!1,this.canvas.setEntities(this.diagram.entities),this.canvas.setRelations(this.diagram.relations),this.render(),console.log("Final render completed for entity:",m)})}setupRelationEditing(){console.log("Setting up relation editing"),this.relationManager.setupRelationEditing()}newDiagram(){this.fileHandler.getModifiedStatus()&&!confirm("현재 다이어그램을 새로 만들까요? 저장하지 않은 변경사항은 사라집니다.")||(this.diagram={entities:{},relations:[],canvas_width:1200,canvas_height:800},this.currentFilePath=null,this.fileHandler.markAsSaved(),this.updateEntityList(),this.render(),this.createAutoBackup())}async openDiagram(){console.log("파일 열기 시작");try{console.log("invoke 호출 시작");const t=await b("load_diagram_from_file");console.log("다이어그램 로드 성공:",t),this.diagram=t.diagram,this.currentFilePath=t.file_path,this.canvas.setEntities(this.diagram.entities),this.canvas.setRelations(this.diagram.relations),this.entityManager.setEntities(this.diagram.entities),this.relationManager.setRelations(this.diagram.relations),this.updateEntityList(),this.render(),console.log("다이어그램 적용 완료"),console.log("로드된 엔티티 수:",Object.keys(this.diagram.entities).length),console.log("로드된 관계 수:",this.diagram.relations.length),alert("파일을 성공적으로 불러왔습니다!")}catch(t){console.error("파일 열기 에러:",t),t!=="Open cancelled"&&!String(t).includes("cancelled")&&alert("파일을 열 수 없습니다: "+t)}}async saveDiagram(){try{let t;this.currentFilePath?(console.log("기존 파일에 저장:",this.currentFilePath),t=await b("save_diagram_to_path",{diagram:this.diagram,file_path:this.currentFilePath}),this.showSuccessMessage("저장 완료",`파일이 저장되었습니다: ${t}`)):t=await this.saveAsDialog(),this.fileHandler.markAsSaved()}catch(t){t!=="Save cancelled"&&!String(t).includes("cancelled")&&alert("저장할 수 없습니다: "+t)}}async saveAsDialog(){const t=await b("save_diagram_to_file",{diagram:this.diagram});return this.currentFilePath=t,this.showSuccessMessage("저장 완료",`파일이 저장되었습니다: ${t}`),t}addEntity(){const t=Math.random()*500+50,e=Math.random()*300+50;this.entityManager.showEntityModal(null,t,e)}addRelation(){if(Object.keys(this.diagram.entities).length<2){alert("관계를 만들기 위해서는 최소 2개의 엔티티가 필요합니다.");return}this.relationManager.showRelationModal()}async exportMarkdown(){this.showLoadingIndicator("Markdown 내보내기 중...");try{const t=new Promise((n,s)=>{setTimeout(()=>s(new Error("Markdown 내보내기 시간이 초과되었습니다.")),3e4)}),e=b("export_markdown",{diagram:this.diagram}),i=await Promise.race([e,t]);this.hideLoadingIndicator(),this.showSuccessMessage("Markdown 내보내기 완료",i)}catch(t){this.hideLoadingIndicator();const e=t.message||t;!e.includes("취소")&&!e.includes("cancelled")&&this.showErrorMessage("Markdown 내보내기 실패",e)}}async exportMermaid(){this.showLoadingIndicator("Mermaid 내보내기 중...");try{const t=new Promise((n,s)=>{setTimeout(()=>s(new Error("Mermaid 내보내기 시간이 초과되었습니다.")),3e4)}),e=b("export_mermaid",{diagram:this.diagram}),i=await Promise.race([e,t]);this.hideLoadingIndicator(),this.showSuccessMessage("Mermaid 내보내기 완료",i)}catch(t){this.hideLoadingIndicator();const e=t.message||t;!e.includes("취소")&&!e.includes("cancelled")&&this.showErrorMessage("Mermaid 내보내기 실패",e)}}updateEntityList(){const t=document.getElementById("entity-list");t.innerHTML="",Object.values(this.diagram.entities).forEach(e=>{const i=document.createElement("div");i.className="entity-item";const n=e.logical_name||e.name;i.innerHTML=`
                <div style="font-weight: bold; margin-bottom: 4px;">${n}</div>
                <div style="font-size: 12px; color: #666;">
                    ${e.attributes.length}개 속성
                </div>
            `,i.addEventListener("click",()=>{this.selectEntity(e.id)}),i.addEventListener("dblclick",()=>{this.entityManager.showEntityModal(e)}),t.appendChild(i)})}selectEntity(t){document.querySelectorAll(".entity-item.selected").forEach(i=>{i.classList.remove("selected")}),document.querySelectorAll(".entity-item").forEach((i,n)=>{Object.keys(this.diagram.entities)[n]===t&&i.classList.add("selected")}),this.canvas.selectEntity(t),this.render()}render(){console.log("렌더링 시작 - 엔티티 수:",Object.keys(this.diagram.entities).length),console.log("렌더링 시작 - 관계 수:",this.diagram.relations.length),this.canvas.updateCanvasSizeToFitContent(),this.canvas.clear(),this.diagram.relations.forEach(t=>{const e=this.diagram.entities[t.from_entity_id],i=this.diagram.entities[t.to_entity_id];e&&i&&this.canvas.drawRelation(e,i,t)}),Object.values(this.diagram.entities).forEach(t=>{console.log("엔티티 렌더링:",t.name,"위치:",{x:t.x,y:t.y}),this.canvas.drawEntity(t)}),console.log("렌더링 완료")}renderEntity(t){this.render()}setupFileHandlerEvents(){this.fileHandler.on("loadingStateChanged",t=>{t.isLoading?this.showLoadingIndicator(t.operation,t.progress):this.hideLoadingIndicator()}),this.fileHandler.on("diagramLoaded",t=>{console.log("다이어그램 로드 완료:",t.filePath)}),this.fileHandler.on("diagramSaved",t=>{console.log("다이어그램 저장 완료:",t.filePath)}),this.fileHandler.on("loadError",t=>{console.error("로드 에러:",t.error)}),this.fileHandler.on("saveError",t=>{console.error("저장 에러:",t.error)})}setupAutoSave(){this.autoSaveEnabled&&setInterval(()=>{this.createAutoBackup()},6e4)}createAutoBackup(){try{const t={diagram:this.diagram,timestamp:new Date().toISOString(),version:"1.0"};localStorage.setItem("erd-editor-auto-backup",JSON.stringify(t)),this.lastBackupTime=new Date,console.log("자동 백업 완료:",this.lastBackupTime.toLocaleString())}catch(t){console.error("자동 백업 실패:",t)}}loadAutoBackup(){try{const t=localStorage.getItem("erd-editor-auto-backup");if(t){const e=JSON.parse(t),i=new Date(e.timestamp);(new Date-i)/(1e3*60*60)<24&&e.diagram&&confirm(`자동 저장된 데이터가 있습니다 (${i.toLocaleString()}). 복구하시겠습니까?`)&&(this.diagram=e.diagram,this.entityManager.setEntities(this.diagram.entities),this.relationManager.setRelations(this.diagram.relations),this.updateEntityList(),this.render(),this.showSuccessMessage("복구 완료","자동 백업에서 다이어그램을 복구했습니다."))}}catch(t){console.error("자동 백업 로드 실패:",t)}}showLoadingIndicator(t,e=0){let i=document.getElementById("loading-indicator");i||(i=document.createElement("div"),i.id="loading-indicator",i.style.cssText=`
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: rgba(0, 0, 0, 0.8);
                color: white;
                padding: 20px;
                border-radius: 8px;
                z-index: 1000;
                text-align: center;
                min-width: 200px;
            `,document.body.appendChild(i)),i.innerHTML=`
            <div>${t}</div>
            <div style="margin-top: 10px; background: #333; border-radius: 4px; overflow: hidden;">
                <div style="height: 4px; background: #007acc; width: ${e}%; transition: width 0.3s;"></div>
            </div>
        `,i.style.display="block"}toggleSidebar(){const t=document.getElementById("sidebar"),e=document.getElementById("toggle-entity-list-btn");if(!t||!e)return;const i=t.classList.toggle("collapsed");e.textContent=i?"목록 펼치기":"목록 접기",setTimeout(()=>{this.canvas.updateCanvasSizeToFitContent(),this.render()},0)}hideLoadingIndicator(){const t=document.getElementById("loading-indicator");t&&(t.style.display="none")}showSuccessMessage(t,e){this.showNotification(t,e,"success")}showErrorMessage(t,e){this.showNotification(t,e,"error")}showNotification(t,e,i="info"){const n=document.createElement("div");if(n.style.cssText=`
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${i==="error"?"#f44336":i==="success"?"#4caf50":"#2196f3"};
            color: white;
            padding: 15px 20px;
            border-radius: 4px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
            z-index: 2000;
            max-width: 400px;
            animation: slideIn 0.3s ease;
        `,n.innerHTML=`
            <div style="font-weight: bold; margin-bottom: 5px;">${t}</div>
            <div style="font-size: 14px; opacity: 0.9;">${e}</div>
        `,document.body.appendChild(n),!document.getElementById("notification-styles")){const s=document.createElement("style");s.id="notification-styles",s.textContent=`
                @keyframes slideIn {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
                @keyframes slideOut {
                    from { transform: translateX(0); opacity: 1; }
                    to { transform: translateX(100%); opacity: 0; }
                }
            `,document.head.appendChild(s)}setTimeout(()=>{n.style.animation="slideOut 0.3s ease",setTimeout(()=>{n.parentNode&&n.parentNode.removeChild(n)},300)},3e3)}}function k(){const t=["canvas","entity-list","add-entity-btn","entity-modal"].filter(e=>!document.getElementById(e));if(t.length>0){console.error("필수 DOM 요소 누락:",t),console.log("DOM 준비 대기 중..."),setTimeout(k,100);return}console.log("모든 필수 DOM 요소 확인 완료, ERDEditor 초기화 시작");try{new T,console.log("ERDEditor 초기화 완료")}catch(e){console.error("ERDEditor 초기화 실패:",e)}}document.readyState==="loading"?document.addEventListener("DOMContentLoaded",k):k();
